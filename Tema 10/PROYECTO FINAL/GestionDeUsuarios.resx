<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AABJRU5ErkJggg==
</value>
  </data>
</root>